version: 2.1

jobs:
  build-service:
    docker:
      - image: alexfalkowski/go:1.22-ruby
    working_directory: ~/konfig
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - restore_cache:
          name: restore go deps
          keys:
            - konfig-build-service-go-cache-{{ checksum "go.sum" }}
            - konfig-build-service-go-cache-
      - restore_cache:
          name: restore ruby deps
          keys:
            - konfig-build-service-ruby-cache-{{ checksum "test/Gemfile.lock" }}
            - konfig-build-service-ruby-cache-
      - run: make dep
      - save_cache:
          name: save go deps
          key: konfig-build-service-go-cache-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/go/pkg/mod
      - save_cache:
          name: save ruby deps
          key: konfig-build-service-ruby-cache-{{ checksum "test/Gemfile.lock" }}
          paths:
            - test/vendor
      - restore_cache:
          name: restore go build cache
          keys:
            - konfig-build-service-go-build-cache-{{ checksum "go.sum" }}
            - konfig-build-service-go-build-cache-
      - run: make lint
      - run: make proto-breaking
      - run: make sec
      - save_cache:
          name: save go build cache
          key: konfig-build-service-go-build-cache-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/.cache/go-build
      - run: make outdated-dep
    resource_class: large
  build-docker:
    docker:
      - image: alexfalkowski/go:1.22-ruby
    working_directory: ~/konfig
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - setup_remote_docker
      - run: make build-docker
      - run: make trivy
    resource_class: large
  features-grpc:
    docker:
      - image: alexfalkowski/go:1.22-ruby
      - image: localstack/localstack:3.4
        environment:
          SERVICES: s3,ssm
      - image: hashicorp/vault:1.16
        environment:
          VAULT_DEV_ROOT_TOKEN_ID: vault-plaintext-root-token
      - image: alexfalkowski/auth:latest
        command: server
        environment:
          AUTH_IN_CONFIG_FILE: yaml:CONFIG
          CONFIG: 
      - image: grafana/mimir:latest
        command: -server.http-listen-port=9009 -auth.multitenancy-enabled=false -ingester.ring.replication-factor=1
    working_directory: ~/konfig
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: dockerize -wait tcp://localhost:8200 -wait tcp://localhost:4566 -wait tcp://localhost:5001 -wait tcp://localhost:9009 -timeout 1m
      - restore_cache:
          name: restore go deps
          keys:
            - konfig-features-grpc-go-cache-{{ checksum "go.sum" }}
            - konfig-features-grpc-go-cache-
      - restore_cache:
          name: restore ruby deps
          keys:
            - konfig-features-grpc-ruby-cache-{{ checksum "test/Gemfile.lock" }}
            - konfig-features-grpc-ruby-cache-
      - run: make dep
      - save_cache:
          name: save go deps
          key: konfig-features-grpc-go-cache-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/go/pkg/mod
      - save_cache:
          name: save ruby deps
          key: konfig-features-grpc-ruby-cache-{{ checksum "test/Gemfile.lock" }}
          paths:
            - test/vendor
      - restore_cache:
          name: restore go build cache
          keys:
            - konfig-features-grpc-go-build-cache-{{ checksum "go.sum" }}
            - konfig-features-grpc-go-build-cache-
      - run: make features-grpc
      - save_cache:
          name: save go build cache
          key: konfig-features-grpc-go-build-cache-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/.cache/go-build
      - store_test_results:
          path: test/reports
      - store_artifacts:
          path: test/reports
      - run: make -C test leave-coverage
      - persist_to_workspace:
          root: test
          paths:
            - reports
    resource_class: large
  features-http:
    docker:
      - image: alexfalkowski/go:1.22-ruby
      - image: localstack/localstack:3.4
        environment:
          SERVICES: s3,ssm
      - image: hashicorp/vault:1.16
        environment:
          VAULT_DEV_ROOT_TOKEN_ID: vault-plaintext-root-token
      - image: alexfalkowski/auth:latest
        command: server
        environment:
          AUTH_IN_CONFIG_FILE: yaml:CONFIG
          CONFIG: 
      - image: grafana/mimir:latest
        command: -server.http-listen-port=9009 -auth.multitenancy-enabled=false -ingester.ring.replication-factor=1
    working_directory: ~/konfig
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: dockerize -wait tcp://localhost:8200 -wait tcp://localhost:4566 -wait tcp://localhost:5001 -wait tcp://localhost:9009 -timeout 1m
      - restore_cache:
          name: restore go deps
          keys:
            - konfig-features-http-go-cache-{{ checksum "go.sum" }}
            - konfig-features-http-go-cache-
      - restore_cache:
          name: restore ruby deps
          keys:
            - konfig-features-http-ruby-cache-{{ checksum "test/Gemfile.lock" }}
            - konfig-features-http-ruby-cache-
      - run: make dep
      - save_cache:
          name: save go deps
          key: konfig-features-http-go-cache-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/go/pkg/mod
      - save_cache:
          name: save ruby deps
          key: konfig-features-http-ruby-cache-{{ checksum "test/Gemfile.lock" }}
          paths:
            - test/vendor
      - restore_cache:
          name: restore go build cache
          keys:
            - konfig-features-http-go-build-cache-{{ checksum "go.sum" }}
            - konfig-features-http-go-build-cache-
      - run: make features-http
      - save_cache:
          name: save go build cache
          key: konfig-features-http-go-build-cache-{{ checksum "go.sum" }}
          paths:
            - /home/circleci/.cache/go-build
      - store_test_results:
          path: test/reports
      - store_artifacts:
          path: test/reports
      - run: make -C test leave-coverage
      - persist_to_workspace:
          root: test
          paths:
            - reports
    resource_class: large
  features-coverage:
    docker:
      - image: alexfalkowski/go:1.22-ruby
    working_directory: ~/konfig
    steps:
      - checkout
      - attach_workspace:
          at: test
      - run: git submodule sync
      - run: git submodule update --init
      - run: make coverage
      - store_artifacts:
          path: test/reports
    resource_class: large
  release:
    docker:
      - image: alexfalkowski/release:3.1
    working_directory: ~/konfig
    steps:
      - checkout
      - run: release
    resource_class: large
  push-docker:
    docker:
      - image: alexfalkowski/go:1.22-ruby
    working_directory: ~/konfig
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - setup_remote_docker
      - run:
          name: make login
          command: echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run: make push-docker
    resource_class: large

workflows:
  konfig:
    jobs:
      - build-service
      - build-docker
      - features-grpc
      - features-http
      - features-coverage:
          requires:
            - features-grpc
            - features-http
      - release:
          context: gh
          requires:
            - build-service
            - build-docker
            - features-coverage
          filters:
            branches:
              only: master
      - push-docker:
          context: docker
          requires:
            - release
          filters:
            branches:
              only: master
