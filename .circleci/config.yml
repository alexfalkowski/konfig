version: 2.1

jobs:
  build-service:
    docker:
      - image: alexfalkowski/go:1.22-ruby
    working_directory: ~/konfig
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: make setup
      - run: make lint
      - run: make proto-breaking
      - run: make sec
    resource_class: large
  build-docker:
    docker:
      - image: alexfalkowski/go:1.22-ruby
    working_directory: ~/konfig
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - setup_remote_docker
      - run: make build-docker
      - run: make trivy
    resource_class: large
  features-grpc:
    docker:
      - image: alexfalkowski/go:1.22-ruby
      - image: localstack/localstack:2.3
        environment:
          SERVICES: s3,ssm
      - image: hashicorp/vault:1.15
        environment:
          VAULT_DEV_ROOT_TOKEN_ID: vault-plaintext-root-token
      - image: alexfalkowski/auth:latest
        command: server
        environment:
          CONFIG_FILE: yaml:CONFIG
          CONFIG: 
    working_directory: ~/konfig
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: dockerize -wait tcp://localhost:8200 -wait tcp://localhost:4566 -wait tcp://localhost:5001 -timeout 1m
      - run: make setup
      - run: make features-grpc
      - store_artifacts:
          path: test/reports
      - run: make -C test leave-coverage
      - persist_to_workspace:
          root: test
          paths:
            - reports
    resource_class: large
  features-http:
    docker:
      - image: alexfalkowski/go:1.22-ruby
      - image: localstack/localstack:2.3
        environment:
          SERVICES: s3,ssm
      - image: hashicorp/vault:1.15
        environment:
          VAULT_DEV_ROOT_TOKEN_ID: vault-plaintext-root-token
      - image: alexfalkowski/auth:latest
        command: server
        environment:
          CONFIG_FILE: yaml:CONFIG
          CONFIG: 
    working_directory: ~/konfig
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - run: dockerize -wait tcp://localhost:8200 -wait tcp://localhost:4566 -wait tcp://localhost:5001 -timeout 1m
      - run: make setup
      - run: make features-http
      - store_artifacts:
          path: test/reports
      - run: make -C test leave-coverage
      - persist_to_workspace:
          root: test
          paths:
            - reports
    resource_class: large
  features-coveralls:
    docker:
      - image: alexfalkowski/go:1.22-ruby
    working_directory: ~/konfig
    steps:
      - checkout
      - attach_workspace:
          at: test
      - run: git submodule sync
      - run: git submodule update --init
      - run: make goveralls
    resource_class: large
  release:
    docker:
      - image: alexfalkowski/release:3.1
    working_directory: ~/konfig
    steps:
      - checkout
      - run: release
    resource_class: large
  push-docker:
    docker:
      - image: alexfalkowski/go:1.22-ruby
    working_directory: ~/konfig
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - setup_remote_docker
      - run:
          name: make login
          command: echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
      - run: make push-docker
    resource_class: large

workflows:
  konfig:
    jobs:
      - build-service
      - build-docker
      - features-grpc
      - features-http
      - features-coveralls:
          requires:
            - features-grpc
            - features-http
      - release:
          context: gh
          requires:
            - build-service
            - build-docker
            - features-coveralls
          filters:
            branches:
              only: master
      - push-docker:
          context: docker
          requires:
            - release
          filters:
            branches:
              only: master
